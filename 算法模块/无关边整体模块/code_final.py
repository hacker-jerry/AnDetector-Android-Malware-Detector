# -*- coding: utf-8 -*-
import os
import sys
import permissions_merge as pm


#该函数用来提取清单及清单中的权限，传入参数为apk的绝对路径
def getAppBaseInfo(apkpath):
    #执行aapt命令提取清单
    output = os.popen("aapt dump permissions %s" % apkpath).read()
    #获得所有的权限
    outList = output.split('\n')
    str_prm = []
    for line in outList:
        if line.startswith('uses-permission:'):
            str_prm.append(line.split('=')[1])
    #返回该清单中的权限组成的列表
    return str_prm

#该函数用来遍历软件集所在的路径下的所有apk，并调用第一个函数来提取权限，调用第三个函数生成权限图（字典）
def getCurrentDirApk(filepath):
    global w
    n=0
    files=os.listdir(filepath)
    #遍历给定路径下的文件
    for filename in files:
        if os.path.splitext(filename)[1] == '.apk':
            #如果是apk文件则打印出来
            #print('find apk:', filename)
            n=n+1 #计算apk个数
            #得到apk文件的绝对路径
            apk_file= filepath + '/' + filename
            #调用函数开始提取清单中的权限，返回权限列表
            str_list=getAppBaseInfo(apk_file)
            #调用函数，开始生成权限对字典
            w = draw_map(str_list)
    #归一化
    for key in w.keys():
        w[key]=(float)(w[key])/n
    return w

#该函数用来生成权限图，传入参数为权限列表
def draw_map(str,w):
    
    #判断权限个数是否大于1
    if len(str)>1:
        for i in range(len(str)-1):
            for j in range(i+1,len(str)):
                if ((str[i],str[j]) in w) or ((str[j],str[i]) in w):
                    w[(str[i],str[j])]=w[(str[i],str[j])]+1 #如果该权限对已经出现过则权值加一
                    w[(str[j],str[i])]=w[(str[j],str[i])]+1
                else:
                    w[(str[i],str[j])]=1
                    w[(str[j],str[i])]=1  #否则权值赋值为1
    return w

#计算正常和恶意得分
def csum_score(egraph,ngraph,list0): #输入为一个恶意图egraph、一个正常图ngraph和一个程序权限清单list0,输出为一个包含恶意得分和正常得分的字典
    score_1=0
    score_2=0
    for i in range(len(list0)-1):
        for j in range(i+1,len(list0)):
            if (list0[i],list0[j]) in egraph or (list0[j],list0[i]) in egraph:
                if (list0[i],list0[j]) in egraph:
                    score_1 = score_1 + egraph[(list0[i],list0[j])]
                else:
                    score_1 = score_1 + egraph[(list0[j],list0[i])]
            if (list0[i],list0[j]) in ngraph or (list0[j],list0[i]) in ngraph:
                if (list0[i],list0[j]) in ngraph:
                    score_2 = score_2 + ngraph[(list0[i],list0[j])]
                else:
                    score_2 = score_2 + ngraph[(list0[j],list0[i])]
    dir0={'evil_score':score_1,'normal_score':score_2}
    return dir0


if __name__ == "__main__":
    #默认第二个参数为apk文件的路径
    w={} #定义空字典
    evil_graph = {}

    evil_graph[0] = getCurrentDirApk("C:/Users/taylor/Desktop/malware/2018") #恶意软件集的路径
    evil_graph[1] = getCurrentDirApk("C:/Users/taylor/Desktop/malware/2019") #恶意软件集的路径
    evil_graph[2] = getCurrentDirApk("C:/Users/taylor/Desktop/malware/2020") #恶意软件集的路径
    normal_graph = getCurrentDirApk("C:/Users/taylor/Desktop/normalware") #正常软件集的路径

    dict_evil = pm.GraphMerge(3,evil_graph,normal_graph)#生成最终恶意图
    filepath = "C:/Users/taylor/Desktop/testware" #测试软件的路径
    files=os.listdir(filepath)
    for filename in files:
        if os.path.splitext(filename)[1] == '.apk':
            #得到apk文件的绝对路径
            apk_file= filepath + '/' + filename
            str_test=getAppBaseInfo(apk_file)
            score_dir=csum_score(dict_evil,normal_graph,str_test)
            if score_dir['evil_score']>score_dir['normal_score']:
                ys_no="Malware!"
            else:
                ys_no="Normalware!"
            print(filename+"  "+ys_no)
            print(score_dir)
            

 
