from django.shortcuts import render,redirect
from django.http import HttpResponse,JsonResponse
from django.views import generic
from django.contrib.auth.forms import UserCreationForm
from apkupload.models import ApkDetection
from user.views import registerPage,loginPage
from django.contrib.auth.decorators import login_required
import json
import os
import time
import datetime
import sys
from django.contrib import messages
import re
from collections import OrderedDict
import apkupload.detect as detect
import uuid
import hashlib
import csv
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
import pickle
from user.models import History,User
# Create your views here.

def apktest(request):
    # apkpath = request.session.pop('apkpath',False)
    context = OrderedDict()
    context = {'msg':''}
    if request.method == "GET":
        #从apkupload的index视图redirect后，request就变成了get,但仍保留着session
        [apkinfo,apkscore,permissiondic,permissionlist] = detect.test(request.session._session['apkpath'])
        request.session['apkinfo'] = apkinfo
        apkscore = format(apkscore['evil_score'],'.3f')
        request.session['apkscore'] = apkscore
        context['msg'] = 200
        # context = {'page_data': json.dumps({"title": "Articles"})}
        #返回文件名称
        context['apkname'] = request.session._session['apkpath'].split('/')[-1]
        #返回文件的SHA256,md5,sha1
        sh = hashlib.sha256()
        f = open(request.session._session['apkpath'],'rb')
        sh.update(f.read())
        context['apksha256'] = sh.hexdigest()
        sh = hashlib.sha1()
        sh.update(f.read())
        context['apksha1'] = sh.hexdigest()
        sh = hashlib.md5()
        sh.update(f.read())
        context['apkmd5'] = sh.hexdigest()
        f.close()
        context['apksize'] = os.path.getsize(request.session._session['apkpath'])/float(1024*1024)
        context['apksize'] = format(context['apksize'], '.3f')
        # context  = json.dumps([context])
        context['apktime'] = os.path.getctime(request.session._session['apkpath'])
        timeStruct = time.localtime(context['apktime'])
        context['apktime'] = time.strftime('%Y-%m-%d %H:%M:%S', timeStruct)
        context['permissions'] = {'per':json.dumps(permissiondic)}

        aa = History(filepath=request.session._session['apkpath'],filename=context['apkname'],fileresult=apkinfo,filescore=apkscore)
        aa.contact = User.objects.first()
        aa.contact = User.objects.get(name=request.user)
        aa.save()
        temp = checkchinese(permissionlist)
        
        temp = [temp[k] for k in range(len(temp))]

        context['permissionslist'] = {'data': json.dumps(temp)}


    return render(request,'apkupload/apkinfo/index.html',context)

def deepDection(request):
    ## 提取api算法
    api_final_list = []
    context = {}
    for line in open(r"./api_list_46.txt"):
        line = line.replace('\n', '').replace('\r', '')
        api_final_list.append(line)

    apkpath = request.session._session['apkpath']
    context['apkname'] = request.session._session['apkpath'].split('/')[-1]
    apkname = context['apkname'][:-4]
    dir_path = os.path.dirname(os.path.abspath('__file__'))
    try:
        os.system("apktool d " + apkpath +" -o "+dir_path+"/resources/"+apkname+"\n")  # 使用apktool,win环境下主要是依靠apktool.bat作为命令行命令，调用apk
        #apktool.jar包，然后输出路径一定要是绝对路径，所以用当前目录拼接的方式解决了,由于版本不同，新版本的apktool要按任意键才能推出
    except:
        print("Error:使用apktool反编译失败")
    else:
        apkname = context['apkname'][:-4]
        apiset = set()
        smalifiles = []
        for fpathe, dirs, fs in os.walk("./resources/" + apkname + '/smali'):  # 遍历提取api部分
            for f in fs:
                try:
                    smalifile = open(os.path.join(fpathe, f), 'r', encoding="utf-8")
                except:
                    print("Error:提取api失败")
                else:
                    smalifiles.append({"name":f})
                    for line in smalifile:
                        line = (re.search(r'invoke.*->([a-zA-Z]+)', line, re.I))
                        if line:
                            if line.group(1) in api_final_list:
                                apiset.add(line.group(1))
        apilist = list(apiset)
        apilist.sort()
        api_flag = api_detection(apilist)
        if api_flag == 1:
          context['machine_result'] = 'Normal'
        else:
          context['machine_result'] = 'Malware'
        if len(apilist):
            context['api-msg'] = 200
        else:
            context['api-msg'] = 404
        apilist = corresponding(apilist)
        context['smaliname'] = smalifiles
    ##########################################
    #测试
    # apilist = [{"name": "getDisplayMessageBody", "contain": "android.telephony.SmsMessage -> getDisplayMessageBody", "chinese": "\u83b7\u53d6\u77ed\u4fe1\u5185\u5bb9"}, {"name": "getLine", "contain": "android.telephony.TelephonyManager -> getLine1Number", "chinese": "\u83b7\u53d6\u624b\u673a\u53f7"}, {"name": "getPackageManager", "contain": "android.content.Context -> getPackageManager", "chinese": "\u83b7\u53d6\u5df2\u5b89\u88c5\u5e94\u7528\u7a0b\u5e8f\u4fe1\u606f"}, {"name": "getProvider", "contain": "android.location.LocationManager -> getProvider", "chinese": "\u83b7\u53d6\u4f4d\u7f6e\u4fe1\u606f"}, {"name": "getSimSerialNumber", "contain": "android.telephony.TelephonyManager -> getSimSerialNumber", "chinese": "\u83b7\u5f97SIM\u5361\u53f7"}, {"name": "getSubscriberId", "contain": "android.telephony.TelephonyManager -> getSubscriberId", "chinese": "\u83b7\u53d6IMSI"}, {"name": "openConnection", "contain": "java.net.URL -> openConnection", "chinese": "\u6253\u5f00\u4e00\u4e2aHttp URL"}, {"name": "setComponentEnabledSetting", "contain": "android.app.ApplicationPackageManager -> setComponentEnabledSetting", "chinese": "\u6682\u65f6\u7a7a\u7f3a"}, {"name": "writeBundle", "contain": "android.os.Parcel -> writeBundle", "chinese": "\u6682\u65f6\u7a7a\u7f3a"}, {"name": "writeToParcel", "contain": "android.os.Parcelable -> writeToParcel", "chinese": "\u5199\u5165\u8054\u7cfb\u4eba\u4fe1\u606f"}]
    #################################################
        context['apis'] = apilist

    return HttpResponse(json.dumps(context))

def corresponding(apilist_before):
    apidict = {"exec":["java.lang.Runtime -> exec","运行子进程"],
       "getAccountsByType":["android.accounts.AccountManager -> getAccountsByType","账号操作"],
       "getBestProvider":["android.location.LocationManager -> getBestProvider","获取位置信息"],
       "getCellLocation":["android.telephony.TelephonyManager -> getCellLocation","获取位置信息"],
       "getConnectionInfo":["android.net.wifi.WifiManager -> getConnectionInfo","获取当前已连接上的wifi的信息"],
       "getDeviceId":["android.telephony.TelephonyManager -> getDeviceId","获取IMEI"],
       "getDisplayMessageBody":["android.telephony.SmsMessage -> getDisplayMessageBody","获取短信内容"],
       "getInputStream":["java.net.Socket -> getInputStream","获取输入流"],
       "getInstalledPackages":["android.app.ApplicationPackageManage -> getInstalledPackages","获取安装应用列表"],
       "getLastKnownLocation":["android.location.LocationManager -> getLastKnownLocation","获取上一次位置"],
       "getLatitude":["android.location.Location -> getLatitude","获得纬度"],
       "getLine":["android.telephony.TelephonyManager -> getLine1Number","获取手机号"],
       "getNeighboringCellInfo":["android.telephony.TelephonyManager -> getNeighboringCellInfo","获取基站信息"],
       "getNetworkInfo":["android.net.ConnectivityManager -> getNetworkInfo","获取固定网络信息"],
       "getNetworkOperator":["android.telephony.TelephonyManager -> getNetworkOperator","获取运营商信息"],
       "getOutputStream":["java.net.Socket -> getOutputStream","获取输出流"],
       "getPackageManager":["android.content.Context -> getPackageManager","获取已安装应用程序信息"],
       "getPhoneType":["android.telephony.TelephonyManager -> getPhoneType","获取（手机型号）信息"],
       "getProvider":["android.location.LocationManager -> getProvider","获取位置信息"],
       "getProviders":["android.location.LocationManager -> getProviders","获取位置信息"],
       "getRunningAppProcesses":["android.app.ActivityManager -> getRunningAppProcesses","获取进程列表"],
       "getRunningTasks":["android.app.ActivityManager -> getRunningTasks","获取正在运行的task"],
       "getSimOperator":["android.telephony.TelephonyManager -> getSimOperator","获取所用供应商信息"],
       "getSimSerialNumber":["android.telephony.TelephonyManager -> getSimSerialNumber","获得SIM卡号"],
       "getSubscriberId":["android.telephony.TelephonyManager -> getSubscriberId","获取IMSI"],
       "getWifiState":["android.net.wifi.WifiManager -> getWifiState","获取wifi当前状态"],
       "isOpened":["android.net.sip.SipManager  isOpened","与视频通讯有关"],
       "isRegistered":["android.net.sip.SipManager -> isRegistered","与视频通讯有关"],
       "listen":["android.telephony.TelephonyManager -> listen","电话监听"],
       "notify":["android.app.NotificationManager -> notify","可能产出恶意通知信息"],
       "openConnection":["java.net.URL -> openConnection","打开一个Http URL"],
       "register":["android.net.sip.SipManager -> register","与视频通讯有关"],
       "removeUpdates":["android.location.LocationManager -> removeUpdates","获取位置信息"],
       "requestLocationUpdates":["android.location.LocationManager -> requestLocationUpdates","获取位置信息"],
       "sendMultipartTextMessage":["android.telephony.SmsManager -> sendMultipartTextMessage","同时发送短信多条短信"],
       "sendTextMessage":["android.telephony.SmsManager -> sendTextMessage","发送短信"],
       "setComponentEnabledSetting":["android.app.ApplicationPackageManager -> setComponentEnabledSetting","暂时空缺"],
       "setOneShotPreviewCallback":["andriod.harware.Camera -> setOneShotPreviewCallback","与相机或图片相关"],
       "setPreviewCallback":["andriod.harware.Camera -> setPreviewCallback","与相机或图片相关"],
       "setPreviewCallbackWithBuffer":["andriod.harware.Camera -> setPreviewCallbackWithBuffer","与相机或图片相关"],
       "startRecording":["android.media.AudioRecord -> startRecording","暂时空缺"],
       "startService":["android.content.Context -> startService","暂时空缺"],
       "takePicture":["andriod.harware.Camera -> takePicture","与相机或图片相关"],
       "unregister":["android.net.sip.SipManager -> unregister","与视频通讯有关"],
       "writeBundle":["android.os.Parcel -> writeBundle","暂时空缺"],
       "writeToParcel":["android.os.Parcelable -> writeToParcel","写入联系人信息"]}
    apilist_after = []
    for api in apilist_before:
        apilist_after.append({"name":api,"contain":apidict[api][0],"chinese":apidict[api][1]})
    return apilist_after


def checkchinese(permissionlist):
  standard = {'android.permission.ACCESS_CHECKIN_PROPERTIES': ['android.permission.ACCESS_CHECKIN_PROPERTIES', '读取或写入登记check-in数据库属性表的权限'], 'android.permission.ACCESS_COARSE_LOCATION': ['android.permission.ACCESS_COARSE_LOCATION', '通过WiFi或移动基站的方式获取用户错略的经纬度信息,定位精度大概误差在30~1500米'], 'android.permission.ACCESS_FINE_LOCATION': ['android.permission.ACCESS_FINE_LOCATION', '通过GPS芯片接收卫星的定位信息,定位精度达10米以内'], 'android.permission.ACCESS_LOCATION_EXTRA_COMMANDS': ['android.permission.ACCESS_LOCATION_EXTRA_COMMANDS', '允许程序访问额外的定位提供者指令'], 'android.permission.ACCESS_MOCK_LOCATION': ['android.permission.ACCESS_MOCK_LOCATION', '获取模拟定位信息,一般用于帮助开发者调试应用'], 'android.permission.ACCESS_NETWORK_STATE': ['android.permission.ACCESS_NETWORK_STATE', '获取网络信息状态,如当前的网络连接是否有效'], 'android.permission.ACCESS_SURFACE_FLINGER': ['android.permission.ACCESS_SURFACE_FLINGER', 'Android平台上底层的图形显示支持,一般用于游戏或照相机预览界面和底层模式的屏幕截图'], 'android.permission.ACCESS_WIFI_STATE': ['android.permission.ACCESS_WIFI_STATE', '获取当前WiFi接入的状态以及WLAN热点的信息'], 'android.permission.ACCOUNT_MANAGER': ['android.permission.ACCOUNT_MANAGER', '获取账户验证信息,主要为GMail账户信息,只有系统级进程才能访问的权限'], 'android.permission.AUTHENTICATE_ACCOUNTS': ['android.permission.AUTHENTICATE_ACCOUNTS', '允许一个程序通过账户验证方式访问账户管理ACCOUNT_MANAGER相关信息'], 'android.permission.BATTERY_STATS': ['android.permission.BATTERY_STATS', '获取电池电量统计信息'], 'android.permission.BIND_APPWIDGET': ['android.permission.BIND_APPWIDGET', '允许一个程序告诉appWidget服务需要访问小插件的数据库,只有非常少的应用才用到此权限'], 'android.permission.BIND_DEVICE_ADMIN': ['android.permission.BIND_DEVICE_ADMIN', '请求系统管理员接收者receiver,只有系统才能使用'], 'android.permission.BIND_INPUT_METHOD': ['android.permission.BIND_INPUT_METHOD', '请求InputMethodService服务,只有系统才能使用'], 'android.permission.BIND_REMOTEVIEWS': ['android.permission.BIND_REMOTEVIEWS', '必须通过RemoteViewsService服务来请求,只有系统才能用'], 'android.permission.BIND_WALLPAPER': ['android.permission.BIND_WALLPAPER', '必须通过WallpaperService服务来请求,只有系统才能用'], 'android.permission.BLUETOOTH': ['android.permission.BLUETOOTH', '允许程序连接配对过的蓝牙设备'], 'android.permission.BLUETOOTH_ADMIN': ['android.permission.BLUETOOTH_ADMIN', '允许程序进行发现和配对新的蓝牙设备'], 'android.permission.BRICK': ['android.permission.BRICK', '能够禁用手机,非常危险,顾名思义就是让手机变成砖头'], 'android.permission.BROADCAST_PACKAGE_REMOVED': ['android.permission.BROADCAST_PACKAGE_REMOVED', '当一个应用在删除时触发一个广播'], 'android.permission.BROADCAST_SMS': ['android.permission.BROADCAST_SMS', '当收到短信时触发一个广播'], 'android.permission.BROADCAST_STICKY': ['android.permission.BROADCAST_STICKY', '允许一个程序收到广播后快速收到下一个广播'], 'android.permission.BROADCAST_WAP_PUSH': ['android.permission.BROADCAST_WAP_PUSH', 'WAP PUSH服务收到后触发一个广播'], 'android.permission.CALL_PHONE': ['android.permission.CALL_PHONE', '允许程序从非系统拨号器里输入电话号码'], 'android.permission.CALL_PRIVILEGED': ['android.permission.CALL_PRIVILEGED', '允许程序拨打电话,替换系统的拨号器界面'], 'android.permission.CAMERA': ['android.permission.CAMERA', '允许访问摄像头进行拍照'], 'android.permission.CHANGE_COMPONENT_ENABLED_STATE': ['android.permission.CHANGE_COMPONENT_ENABLED_STATE', '改变组件是否启用状态'], 'android.permission.CHANGE_CONFIGURATION': ['android.permission.CHANGE_CONFIGURATION', '允许当前应用改变配置,如定位'], 'android.permission.CHANGE_NETWORK_STATE': ['android.permission.CHANGE_NETWORK_STATE', '改变网络状态如是否能联网'], 'android.permission.CHANGE_WIFI_MULTICAST_STATE': ['android.permission.CHANGE_WIFI_MULTICAST_STATE', '改变WiFi多播状态'], 'android.permission.CHANGE_WIFI_STATE': ['android.permission.CHANGE_WIFI_STATE', '改变WiFi状态'], 'android.permission.CLEAR_APP_CACHE': ['android.permission.CLEAR_APP_CACHE', '清除应用缓存'], 'android.permission.CLEAR_APP_USER_DATA': ['android.permission.CLEAR_APP_USER_DATA', '清除应用的用户数据'], 'android.permission.CWJ_GROUP': ['android.permission.CWJ_GROUP', '允许CWJ账户组访问底层信息'], 'android.permission.CELL_PHONE_MASTER_EX': ['android.permission.CELL_PHONE_MASTER_EX', '手机优化大师扩展权限'], 'android.permission.CONTROL_LOCATION_UPDATES': ['android.permission.CONTROL_LOCATION_UPDATES', '允许获得移动网络定位信息改变'], 'android.permission.DELETE_CACHE_FILES': ['android.permission.DELETE_CACHE_FILES', '允许应用删除缓存文件'], 'android.permission.DELETE_PACKAGES': ['android.permission.DELETE_PACKAGES', '允许程序删除应用'], 'android.permission.DEVICE_POWER': ['android.permission.DEVICE_POWER', '允许访问底层电源管理'], 'android.permission.DIAGNOSTIC': ['android.permission.DIAGNOSTIC', '允许程序到RW到诊断资源'], 'android.permission.DISABLE_KEYGUARD': ['android.permission.DISABLE_KEYGUARD', '允许程序禁用键盘锁'], 'android.permission.DUMP': ['android.permission.DUMP', '允许程序获取系统dump信息从系统服务'], 'android.permission.EXPAND_STATUS_BAR': ['android.permission.EXPAND_STATUS_BAR', '允许程序扩展或收缩状态栏'], 'android.permission.FACTORY_TEST': ['android.permission.FACTORY_TEST', '允许程序运行工厂测试模式'], 'android.permission.FLASHLIGHT': ['android.permission.FLASHLIGHT', '允许访问闪光灯'], 'android.permission.FORCE_BACK': ['android.permission.FORCE_BACK', '允许程序强制使用back后退按键,无论Activity是否在顶层'], 'android.permission.GET_ACCOUNTS': ['android.permission.GET_ACCOUNTS', '访问GMail账户列表'], 'android.permission.GET_PACKAGE_SIZE': ['android.permission.GET_PACKAGE_SIZE', '获取应用的文件大小'], 'android.permission.GET_TASKS': ['android.permission.GET_TASKS', '允许程序获取当前或最近运行的应用'], 'android.permission.GLOBAL_SEARCH': ['android.permission.GLOBAL_SEARCH', '允许程序使用全局搜索功能'], 'android.permission.HARDWARE_TEST': ['android.permission.HARDWARE_TEST', '访问硬件辅助设备,用于硬件测试'], 'android.permission.INJECT_EVENTS': ['android.permission.INJECT_EVENTS', '允许访问本程序的底层事件,获取按键、轨迹球的事件流'], 'android.permission.INSTALL_LOCATION_PROVIDER': ['android.permission.INSTALL_LOCATION_PROVIDER', '安装定位提供'], 'android.permission.INSTALL_PACKAGES': ['android.permission.INSTALL_PACKAGES', '允许程序安装应用'], 'android.permission.INTERNAL_SYSTEM_WINDOW': ['android.permission.INTERNAL_SYSTEM_WINDOW', '允许程序打开内部窗口,不对第三方应用程序开放此权限'], 'android.permission.INTERNET': ['android.permission.INTERNET', '访问网络连接,可能产生GPRS流量'], 'android.permission.KILL_BACKGROUND_PROCESSES': ['android.permission.KILL_BACKGROUND_PROCESSES', '允许程序调用killBackgroundProcesses(String).方法结束后台进程'], 'android.permission.MANAGE_ACCOUNTS': ['android.permission.MANAGE_ACCOUNTS', '允许程序管理AccountManager中的账户列表'], 'android.permission.MANAGE_APP_TOKENS': ['android.permission.MANAGE_APP_TOKENS', '管理创建、摧毁、Z轴顺序,仅用于系统'], 'android.permission.MTWEAK_USER': ['android.permission.MTWEAK_USER', '允许mTweak用户访问高级系统权限'], 'android.permission.MTWEAK_FORUM': ['android.permission.MTWEAK_FORUM', '允许使用mTweak社区权限'], 'android.permission.MASTER_CLEAR': ['android.permission.MASTER_CLEAR', '允许程序执行软格式化,删除系统配置信息'], 'android.permission.MODIFY_AUDIO_SETTINGS': ['android.permission.MODIFY_AUDIO_SETTINGS', '修改声音设置信息'], 'android.permission.MODIFY_PHONE_STATE': ['android.permission.MODIFY_PHONE_STATE', '修改电话状态,如飞行模式,但不包含替换系统拨号器界面'], 'android.permission.MOUNT_FORMAT_FILESYSTEMS': ['android.permission.MOUNT_FORMAT_FILESYSTEMS', '格式化可移动文件系统,比如格式化清空SD卡'], 'android.permission.MOUNT_UNMOUNT_FILESYSTEMS': ['android.permission.MOUNT_UNMOUNT_FILESYSTEMS', '挂载、反挂载外部文件系统'], 'android.permission.NFC': ['android.permission.NFC', '允许程序执行NFC近距离通讯操作,用于移动支持'], 'android.permission.PERSISTENT_ACTIVITY': ['android.permission.PERSISTENT_ACTIVITY', '创建一个永久的Activity,该功能标记为将来将被移除'], 'android.permission.PROCESS_OUTGOING_CALLS': ['android.permission.PROCESS_OUTGOING_CALLS', '允许程序监视,修改或放弃播出电话'], 'android.permission.READ_CALENDAR': ['android.permission.READ_CALENDAR', '允许程序读取用户的日程信息'], 'android.permission.READ_CONTACTS': ['android.permission.READ_CONTACTS', '允许应用访问联系人通讯录信息'], 'android.permission.READ_FRAME_BUFFER': ['android.permission.READ_FRAME_BUFFER', '读取帧缓存用于屏幕截图'], 'com.android.browser.permission.READ_HISTORY_BOOKMARKS': ['com.android.browser.permission.READ_HISTORY_BOOKMARKS', '读取浏览器收藏夹和历史记录'], 'android.permission.READ_INPUT_STATE': ['android.permission.READ_INPUT_STATE', '读取当前键的输入状态,仅用于系统'], 'android.permission.READ_LOGS': ['android.permission.READ_LOGS', '读取系统底层日志'], 'android.permission.READ_PHONE_STATE': ['android.permission.READ_PHONE_STATE', '访问电话状态'], 'android.permission.READ_SMS': ['android.permission.READ_SMS', '读取短信内容'], 'android.permission.READ_SYNC_SETTINGS': ['android.permission.READ_SYNC_SETTINGS', '读取同步设置,读取Google在线同步设置'], 'android.permission.READ_SYNC_STATS': ['android.permission.READ_SYNC_STATS', '读取同步状态,获得Google在线同步状态'], 'android.permission.REBOOT': ['android.permission.REBOOT', '允许程序重新启动设备'], 'android.permission.RECEIVE_BOOT_COMPLETED': ['android.permission.RECEIVE_BOOT_COMPLETED', '允许程序开机自动运行'], 'android.permission.RECEIVE_MMS': ['android.permission.RECEIVE_MMS', '接收彩信'], 'android.permission.RECEIVE_SMS': ['android.permission.RECEIVE_SMS', '接收短信'], 'android.permission.RECEIVE_WAP_PUSH': ['android.permission.RECEIVE_WAP_PUSH', '接收WAP PUSH信息'], 'android.permission.RECORD_AUDIO': ['android.permission.RECORD_AUDIO', '录制声音通过手机或耳机的麦克'], 'android.permission.REORDER_TASKS': ['android.permission.REORDER_TASKS', '重新排序系统Z轴运行中的任务'], 'android.permission.RESTART_PACKAGES': ['android.permission.RESTART_PACKAGES', '结束任务通过restartPackage(String)方法,该方式将在外来放弃'], 'android.permission.SEND_SMS': ['android.permission.SEND_SMS', '发送短信'], 'android.permission.SET_ACTIVITY_WATCHER': ['android.permission.SET_ACTIVITY_WATCHER', '设置Activity观察器一般用于monkey测试'], 'com.android.alarm.permission.SET_ALARM': ['com.android.alarm.permission.SET_ALARM', '设置闹铃提醒'], 'android.permission.SET_ALWAYS_FINISH': ['android.permission.SET_ALWAYS_FINISH', '设置程序在后台是否总是退出'], 'android.permission.SET_ANIMATION_SCALE': ['android.permission.SET_ANIMATION_SCALE', '设置全局动画缩放'], 'android.permission.SET_DEBUG_APP': ['android.permission.SET_DEBUG_APP', '设置调试程序,一般用于开发'], 'android.permission.SET_ORIENTATION': ['android.permission.SET_ORIENTATION', '设置屏幕方向为横屏或标准方式显示,不用于普通应用'], 'android.permission.SET_PREFERRED_APPLICATIONS': ['android.permission.SET_PREFERRED_APPLICATIONS', '设置应用的参数,已不再工作具体查看addPackageToPreferred(String)介绍'], 'android.permission.SET_PROCESS_LIMIT': ['android.permission.SET_PROCESS_LIMIT', '允许程序设置最大的进程数量的限制'], 'android.permission.SET_TIME': ['android.permission.SET_TIME', '设置系统时间'], 'android.permission.SET_TIME_ZONE': ['android.permission.SET_TIME_ZONE', '设置系统时区'], 'android.permission.SET_WALLPAPER': ['android.permission.SET_WALLPAPER', '设置桌面壁纸'], 'android.permission.SET_WALLPAPER_HINTS': ['android.permission.SET_WALLPAPER_HINTS', '设置壁纸建议'], 'android.permission.SIGNAL_PERSISTENT_PROCESSES': ['android.permission.SIGNAL_PERSISTENT_PROCESSES', '发送一个永久的进程信号'], 'android.permission.STATUS_BAR': ['android.permission.STATUS_BAR', '允许程序打开、关闭、禁用状态栏'], 'android.permission.SUBSCRIBED_FEEDS_READ': ['android.permission.SUBSCRIBED_FEEDS_READ', '访问订阅信息的数据库'], 'android.permission.SUBSCRIBED_FEEDS_WRITE': ['android.permission.SUBSCRIBED_FEEDS_WRITE', '写入或修改订阅内容的数据库'], 'android.permission.SYSTEM_ALERT_WINDOW': ['android.permission.SYSTEM_ALERT_WINDOW', '显示系统窗口'], 'android.permission.UPDATE_DEVICE_STATS': ['android.permission.UPDATE_DEVICE_STATS', '更新设备状态'], 'android.permission.USE_CREDENTIALS': ['android.permission.USE_CREDENTIALS', '允许程序请求验证从AccountManager'], 'android.permission.USE_SIP': ['android.permission.USE_SIP', '允许程序使用SIP视频服务'], 'android.permission.VIBRATE': ['android.permission.VIBRATE', '允许振动'], 'android.permission.WAKE_LOCK': ['android.permission.WAKE_LOCK', '允许程序在手机屏幕关闭后后台进程仍然运行'], 'android.permission.WRITE_APN_SETTINGS': ['android.permission.WRITE_APN_SETTINGS', '写入网络GPRS接入点设置'], 'android.permission.WRITE_CALENDAR': ['android.permission.WRITE_CALENDAR', '写入日程,但不可读取'], 'android.permission.WRITE_CONTACTS': ['android.permission.WRITE_CONTACTS', '写**系人,但不可读取'], 'android.permission.WRITE_EXTERNAL_STORAGE': ['android.permission.WRITE_EXTERNAL_STORAGE', '允许程序写入外部存储,如SD卡上写文件'], 'android.permission.WRITE_GSERVICES': ['android.permission.WRITE_GSERVICES', '允许程序写入Google Map服务数据'], 'com.android.browser.permission.WRITE_HISTORY_BOOKMARKS': ['com.android.browser.permission.WRITE_HISTORY_BOOKMARKS', '写入浏览器历史记录或收藏夹,但不可读取'], 'android.permission.WRITE_SECURE_SETTINGS': ['android.permission.WRITE_SECURE_SETTINGS', '允许程序读写系统安全敏感的设置项'], 'android.permission.WRITE_SETTINGS': ['android.permission.WRITE_SETTINGS', '允许读写系统设置项'], 'android.permission.WRITE_SMS': ['android.permission.WRITE_SMS', '允许编写短信']}
  pchinese = ""
  temp = {}
  k=0
  for permission in permissionlist:
    if permission in standard:
      temp[k] = {"name": permission ,"chinese": standard[permission][1]}
      k = k+1

  return temp


def api_detection(api_list):
    apilist_46 = ["exec","getAccountsByType","getBestProvider","getCellLocation","getConnectionInfo","getDeviceId","getDisplayMessageBody"
                  ,"getInputStream","getInstalledPackages","getLastKnownLocation","getLatitude","getLine","getNeighboringCellInfo","getNetworkInfo"
                  ,"getNetworkOperator","getOutputStream","getPackageManager","getPhoneType","getProvider","getProviders","getRunningAppProcesses"
                  ,"getRunningTasks","getSimOperator","getSimSerialNumber","getSubscriberId","getWifiState","isOpened","isRegistered","listen","notify"
                  ,"openConnection","register","removeUpdates","requestLocationUpdates","sendMultipartTextMessage","sendTextMessage","setComponentEnabledSetting"
                  ,"setOneShotPreviewCallback","setPreviewCallback","setPreviewCallbackWithBuffer","startRecording","startService","takePicture"
                  ,"unregister","writeBundle","writeToParcel"]
    #二维0,1数组
    api_list_one_or_zero = [[]]
    for api in apilist_46:
        if (api in api_list):
            api_list_one_or_zero[0].append(1)
        else:
            api_list_one_or_zero[0].append(0)
            
    with open("model.pkl", "rb") as f1:
        rf1 = pickle.load(f1)
    p = rf1.predict(api_list_one_or_zero)
    p = p[0][0]
    return p

def Userhomepage(request):
    uname  = request.user.username
    user = User.objects.get(name=uname)

    history = History.objects.filter(contact_id=user.id).all()
    apkhas256 = []
    userinfo = {"apkname":[],"apkresult":[],"apkscore":[],"apknum":0,"usingtimes":0,"logintime":0,"apkpath":[]}
    userinfo["logintime"] = request.user.last_login
    for item in history:
        userinfo["usingtimes"] = userinfo["usingtimes"] + 1
        sh = hashlib.sha256()
        f = open(item.filepath, 'rb')
        sh.update(f.read())
        apksha256 = sh.hexdigest()
        f.close()
        if apksha256 in apkhas256:
            #用sha256来判断是否为同一文件
            continue
        else:
            userinfo["apkname"].append(item.filename)
            userinfo["apkresult"].append(item.fileresult)
            userinfo["apkscore"].append(item.filescore)
            userinfo["apkpath"].append(item.filepath)
            userinfo["apknum"] = userinfo["apknum"] + 1
            apkhas256.append(apksha256)
    # return JsonResponse(userinfo)
    return render(request,'apkupload/userhome/index.html',userinfo)

def apkreview(request):
    context = OrderedDict()
    context = {'msg':''}
    if request.method == "POST":
        #从apkupload的index视图redirect后，request就变成了get,但仍保留着session
        [apkinfo,apkscore,permissiondic,permissionlist] = detect.test(request.POST['path'])
        request.session['apkinfo'] = apkinfo
        apkscore = format(apkscore['evil_score'],'.3f')
        request.session['apkscore'] = apkscore
        context['msg'] = 200
        # context = {'page_data': json.dumps({"title": "Articles"})}
        #返回文件名称
        context['apkname'] = request.POST['path'].split('/')[-1]
        #返回文件的SHA256,md5,sha1
        sh = hashlib.sha256()
        f = open(request.POST['path'],'rb')
        sh.update(f.read())
        context['apksha256'] = sh.hexdigest()
        sh = hashlib.sha1()
        sh.update(f.read())
        context['apksha1'] = sh.hexdigest()
        sh = hashlib.md5()
        sh.update(f.read())
        context['apkmd5'] = sh.hexdigest()
        f.close()
        context['apksize'] = os.path.getsize(request.POST['path'])/float(1024*1024)
        context['apksize'] = format(context['apksize'], '.3f')
        # context  = json.dumps([context])
        context['apktime'] = os.path.getctime(request.POST['path'])
        timeStruct = time.localtime(context['apktime'])
        context['apktime'] = time.strftime('%Y-%m-%d %H:%M:%S', timeStruct)
        context['permissions'] = {'per':json.dumps(permissiondic)}

        
        temp = checkchinese(permissionlist)
        
        temp = [temp[k] for k in range(len(temp))]

        context['permissionslist'] = {'data': json.dumps(temp)}


    return render(request,'apkupload/apkinfo/index.html',context)